require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/plants", type: :request do
  # Plant. As you add validations to Plant, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:plant)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:invalid_plant)
  }

  describe "GET /index" do
    it "renders a successful response" do
      Plant.create! valid_attributes
      get plants_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      plant = Plant.create! valid_attributes
      get plant_url(plant)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_plant_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      plant = Plant.create! valid_attributes
      get edit_plant_url(plant)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Plant" do
        expect {
          post plants_url, params: { plant: valid_attributes }
        }.to change(Plant, :count).by(1)
      end

      it "redirects to the created plant" do
        post plants_url, params: { plant: valid_attributes }
        expect(response).to redirect_to(plant_url(Plant.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Plant" do
        expect {
          post plants_url, params: { plant: invalid_attributes }
        }.to change(Plant, :count).by(0)
      end

      it "renders a response with 422 status - unporcessable entity" do
        post plants_url, params: { plant: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "newplant" }
      }

      it "updates the requested plant" do
        plant = Plant.create! valid_attributes
        patch plant_url(plant), params: { plant: new_attributes }
        plant.reload
        expect(plant.name).to eq("newplant")
      end

      it "redirects to the plant" do
        plant = Plant.create! valid_attributes
        patch plant_url(plant), params: { plant: new_attributes }
        plant.reload
        expect(response).to redirect_to(plant_url(plant))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status - unporcessable entity" do
        plant = Plant.create! valid_attributes
        patch plant_url(plant), params: { plant: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested plant" do
      plant = Plant.create! valid_attributes
      expect {
        delete plant_url(plant)
      }.to change(Plant, :count).by(-1)
    end

    it "redirects to the plants list" do
      plant = Plant.create! valid_attributes
      delete plant_url(plant)
      expect(response).to redirect_to(plants_url)
    end
  end
end
